#!/usr/bin/env node
var util = require('util'),
	Path = require('path'),
	fs = require('fs'),
	cluster = require('cluster'),
	utils = require('../lib/utils');


var args = process.argv.slice(2),
	debug = args.indexOf('-d') !== -1;

util.debug = debug ? util.debug : function() {};


var Util = {
	getPath: function(path) {
		return Path.normalize(Path.join(__dirname, '../' + path));
	}
};


var Cluster = {
	start: function() {
		this._start();
		this._watch();
	},


	_start: function() {
		for (var id in cluster.workers) {
			cluster.workers[id].kill();
		}

		var os = require('os'),
			count = os.cpus().length * 2;

		for (var i = 0; i < count; i++) {
			cluster.fork();
		}
		
		cluster.on('exit', function(worker, code, signal) {
			util.log('worker ' + worker.process.pid + ' died');
		});
	},


	_watch: function() {
		var self = this,
			path = Util.getPath('config.js'),
			watcher = fs.watch(path);

		watcher.on('change', function() {
			utils.schedule('start-cluster', function() {
				self._start();	
			}, 2000);
		});
	}

};


var Server = {
	start: function() {
		var server = require('../lib/server'),
			config = require('../config');

		config = this.prepare(config);

		util.log('create server: ' + config.port);
		var http = require('http'),
			app = server(config);

		app.listen(config.port).on('error', function(e) {
			util.error(e);
		});
	},


	prepare: function(config) {
		var filters = require('../filters');

		config = utils.extend({
			port: 80,
			filters: filters
		}, config);

		var index = args.indexOf('-p'),
			port = index !== -1 ? parseInt(args[index + 1]) : null;
		if (port) {
			config.port = port;
		}

		var hosts = config.hosts || {};
		var o = {
			appRoot: Util.getPath('app')
		};

		hosts['127.0.0.1'] = hosts['127.0.0.1'] || o;
		hosts['fdserver'] = hosts['fdserver'] || o;

		debug && (config.debug = true);

		return config;
	}
};


if (!debug && cluster.isMaster) {
	Cluster.start();
	/*
	var install = require('../lib/install');
	install.start(function() {
		Cluster.start();
	});
	*/
} else {
	Server.start();
}

